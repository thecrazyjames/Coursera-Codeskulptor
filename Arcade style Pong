# Implementation of classic arcade game Pong
# use s and w keys to operate the left paddle and down and up to operate the right paddle

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400    
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True


# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
        
    ball_pos = [0,0]
    ball_vel = [0,0]
    
    if direction == RIGHT:
        ball_pos=[WIDTH/2, HEIGHT/2]
        ball_vel = [random.randrange(2,4),random.randrange(2,4)]
        
    elif direction == LEFT:
        ball_pos=[WIDTH/2, HEIGHT/2]
        ball_vel = [-random.randrange(2,4), -random.randrange(2,4)]
        
    
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    
    score1 = 0
    score2 = 0
    
    paddle1_pos=[PAD_WIDTH/2,HEIGHT/2]
    paddle2_pos=[WIDTH-PAD_WIDTH/2, HEIGHT/2]
    paddle1_vel=0
    paddle2_vel=0
    
    spawn_ball(RIGHT)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel
 
    
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    
    if ball_pos[1] > HEIGHT-BALL_RADIUS:
        
        ball_vel[1] = -ball_vel[1]
        
    elif ball_pos[1] < BALL_RADIUS:
        
        ball_vel[1] = -ball_vel[1]
        
     
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2,"White", "White")
    
    # update paddle's vertical position, keep paddle on the screen
    
    paddle1_pos[1]+=paddle1_vel
    paddle2_pos[1]+=paddle2_vel
    
    if paddle1_pos[1]<PAD_HEIGHT/2:
        paddle1_pos[1]=PAD_HEIGHT/2
    elif paddle1_pos[1]>HEIGHT-PAD_HEIGHT/2:
        paddle1_pos[1]=HEIGHT-PAD_HEIGHT/2
        
    if paddle2_pos[1]<PAD_HEIGHT/2:
        paddle2_pos[1]=PAD_HEIGHT/2
    elif paddle2_pos[1]>HEIGHT-PAD_HEIGHT/2:
        paddle2_pos[1]=HEIGHT-PAD_HEIGHT/2
    
    # draw paddles
    canvas.draw_line((PAD_WIDTH/2,paddle1_pos[1]-PAD_HEIGHT/2), (PAD_WIDTH/2,paddle1_pos[1]+PAD_HEIGHT/2), PAD_WIDTH, 'White')
    canvas.draw_line((WIDTH-PAD_WIDTH/2,paddle2_pos[1]-PAD_HEIGHT/2), (WIDTH-PAD_WIDTH/2,paddle2_pos[1]+PAD_HEIGHT/2), PAD_WIDTH, 'White')
    
    # determine whether paddle and ball collide
    if ball_pos[0]>=WIDTH-(PAD_WIDTH+BALL_RADIUS):
        if paddle2_pos[1]-PAD_HEIGHT/2 <= ball_pos[1] <= paddle2_pos[1] + PAD_HEIGHT:
            ball_vel[0]=-1.2*ball_vel[0]
        else:
            score1 = score1 + 1
            spawn_ball(LEFT)
    elif ball_pos[0]<=PAD_WIDTH+BALL_RADIUS:
        if paddle1_pos[1]-PAD_HEIGHT/2 <= ball_pos[1] <= paddle1_pos[1] + PAD_HEIGHT:        
            ball_vel[0]=-1.2*ball_vel[0]
        else:
            score2 = score2 + 1
            spawn_ball(RIGHT)
    # draw scores
    canvas.draw_text(str(score1), (150, 60), 36, 'White')
    canvas.draw_text(str(score2), (450, 60), 36, 'White')

#creates a button to start a new game
def button_handler():
    new_game()
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = -4
    elif key == simplegui.KEY_MAP['s']:
        paddle1_vel = 4
    elif key == simplegui.KEY_MAP['up']:
        paddle2_vel = -4
    elif key == simplegui.KEY_MAP['down']:
        paddle2_vel = 4
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP['s']:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP['up']:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP['down']:
        paddle2_vel = 0


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
button1 = frame.add_button('Reset', button_handler)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


# start frame
new_game()
frame.start()
