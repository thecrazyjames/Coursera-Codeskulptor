# James Carr's version of Memory for IIPP (Part 2) On Coursera
# implementation of card game - Memory

import simplegui
import random

# helper function to initialize globals
def new_game():
    global deck, exposed, turns, click_counter, opened_card
    
    
    deck1=[0,1,2,3,4,5,6,7]
    deck2=[0,1,2,3,4,5,6,7]    
    deck=deck1+deck2
    random.shuffle(deck)
    exposed=[False for i in range(16)]
    opened_card=[]
    click_counter=0
    turns = 0
    
# define event handlers
def mouseclick(pos):
    # add game state logic here
    global click_counter,turns
    if click_counter==0:
        opened_card.append(pos[0]//50)
        exposed[pos[0]//50]=True
        click_counter+=1
        turns=1
        
    elif click_counter==1:
        if not (pos[0]//50 in opened_card):
            opened_card.append(pos[0]//50)
            click_counter+=1
        exposed[pos[0]//50]=True
       
    else:
        if not (pos[0]//50 in opened_card):
            if deck[opened_card[-1]]!=deck[opened_card[-2]]:
                exposed[opened_card[-1]]=False
                exposed[opened_card[-2]]=False
                opened_card.pop()
                opened_card.pop()
            click_counter=1
            turns+=1
            exposed[pos[0]//50]=True
            opened_card.append(pos[0]//50)
    
    label.set_text("Turns =" +str(turns))                  
# cards are logically 50x100 pixels in size    
def draw(canvas):
    
    for n in range(len(deck)):
        if exposed[n]:
            canvas.draw_text(str(deck[n]), [10+n*50, 75], 70, "White")
        
        else:
            canvas.draw_line([25+n*50, 0], [25+n*50, 100], 48, 'Green') 


# create frame and add a button and labels
frame = simplegui.create_frame("Memory", 800, 100)
frame.add_button("Reset", new_game)
label = frame.add_label("Turns = 0")

# register event handlers
frame.set_mouseclick_handler(mouseclick)
frame.set_draw_handler(draw)

# get things rolling
new_game()
frame.start()

